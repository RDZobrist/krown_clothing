{"ast":null,"code":"var _jsxFileName = \"/Users/Zobrist/Desktop/Code/krown_clothing/src/components/checkout-button/stripe-button.component.jsx\";\nimport React from \"react\";\nimport StripeCheckout from 'react-stripe-checkout';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst StripeCheckoutButton = ({\n  price\n}) => {\n  const priceForStripe = price * 100;\n  const publishable_key = 'pk_test_51JrB82LXLc6RQBpHwh9xIxjIZEPR9vvVOlT1rcOjDXAS2gubDCmvAPsd81LoJhScB1MjcE8yxsqfbo6jX5VI8Hz300SVfgd3pf';\n\n  const onToken = token => {\n    console.log(`token: ${token}`);\n    /* this is where the backend server call will be made using tokento handle the payment*/\n\n    alert('payment successful');\n  };\n\n  const onOpened = () => {\n    console.log('stripe payment window opened');\n  };\n\n  const onClosed = () => {\n    console.log('stripe payment window closed');\n  };\n\n  return /*#__PURE__*/_jsxDEV(StripeCheckout, {\n    label: \"Pay Now\",\n    name: \"Krown Clothing\" // the pop-in header title\n    ,\n    description: \"Providing you with all you your fashion since 2018\" // the pop-in header subtitle\n    ,\n    image: \"https://svgshare.com/i/CUz.svg\",\n    description: `Your total is ${price}`,\n    ComponentClass: \"div\",\n    panelLabel: \"Pay Now\" // prepended to the amount in the bottom pay button\n    ,\n    billingAddress: true,\n    shippingAddress: true,\n    amount: priceForStripe,\n    stripeKey: publishable_key,\n    currency: \"USD\",\n    email: \"support@krown_\" // Note: enabling both zipCode checks and billing or shipping address will\n    // cause zipCheck to be pulled from billing address (set to shipping if none provided).\n    ,\n    zipCode: false,\n    bitcoin: true,\n    allowRememberMe: true // \"Remember Me\" option (default true)\n    ,\n    token: onToken // submit callback\n    ,\n    opened: onOpened // called when the checkout popin is opened \n    ,\n    closed: onClosed // called when the checkout popin is closed \n    ,\n    reconfigureOnUpdate: false\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 9\n  }, this);\n};\n\n_c = StripeCheckoutButton;\nexport default StripeCheckoutButton;\n\nvar _c;\n\n$RefreshReg$(_c, \"StripeCheckoutButton\");","map":{"version":3,"sources":["/Users/Zobrist/Desktop/Code/krown_clothing/src/components/checkout-button/stripe-button.component.jsx"],"names":["React","StripeCheckout","StripeCheckoutButton","price","priceForStripe","publishable_key","onToken","token","console","log","alert","onOpened","onClosed"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,cAAP,MAA2B,uBAA3B;;;AAGA,MAAMC,oBAAoB,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAe;AACxC,QAAMC,cAAc,GAAGD,KAAK,GAAG,GAA/B;AACA,QAAME,eAAe,GAAG,6GAAxB;;AAEA,QAAMC,OAAO,GAAGC,KAAK,IAAI;AACrBC,IAAAA,OAAO,CAACC,GAAR,CAAa,UAASF,KAAM,EAA5B;AACA;;AACAG,IAAAA,KAAK,CAAC,oBAAD,CAAL;AACH,GAJD;;AAKA,QAAMC,QAAQ,GAAG,MAAM;AACnBH,IAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ;AACH,GAFD;;AAGA,QAAMG,QAAQ,GAAG,MAAM;AACnBJ,IAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ;AACH,GAFD;;AAGA,sBACI,QAAC,cAAD;AACI,IAAA,KAAK,EAAC,SADV;AAEI,IAAA,IAAI,EAAC,gBAFT,CAE0B;AAF1B;AAGI,IAAA,WAAW,EAAC,oDAHhB,CAGqE;AAHrE;AAII,IAAA,KAAK,EAAC,gCAJV;AAKI,IAAA,WAAW,EAAG,iBAAgBN,KAAM,EALxC;AAMI,IAAA,cAAc,EAAC,KANnB;AAOI,IAAA,UAAU,EAAC,SAPf,CAOyB;AAPzB;AAQI,IAAA,cAAc,MARlB;AASI,IAAA,eAAe,MATnB;AAUI,IAAA,MAAM,EAAEC,cAVZ;AAWI,IAAA,SAAS,EAAEC,eAXf;AAYI,IAAA,QAAQ,EAAC,KAZb;AAaI,IAAA,KAAK,EAAC,gBAbV,CAcI;AACA;AAfJ;AAgBI,IAAA,OAAO,EAAE,KAhBb;AAiBI,IAAA,OAAO,EAAE,IAjBb;AAkBI,IAAA,eAAe,MAlBnB,CAkBoB;AAlBpB;AAmBI,IAAA,KAAK,EAAEC,OAnBX,CAmBoB;AAnBpB;AAoBI,IAAA,MAAM,EAAEK,QApBZ,CAoBsB;AApBtB;AAqBI,IAAA,MAAM,EAAEC,QArBZ,CAqBsB;AArBtB;AAsBI,IAAA,mBAAmB,EAAE;AAtBzB;AAAA;AAAA;AAAA;AAAA,UADJ;AA0BH,CAzCD;;KAAMV,oB;AA2CN,eAAeA,oBAAf","sourcesContent":["import React from \"react\";\nimport StripeCheckout from 'react-stripe-checkout';\n\n\nconst StripeCheckoutButton = ({ price }) => {\n    const priceForStripe = price * 100;\n    const publishable_key = 'pk_test_51JrB82LXLc6RQBpHwh9xIxjIZEPR9vvVOlT1rcOjDXAS2gubDCmvAPsd81LoJhScB1MjcE8yxsqfbo6jX5VI8Hz300SVfgd3pf';\n\n    const onToken = token => {\n        console.log(`token: ${token}`);\n        /* this is where the backend server call will be made using tokento handle the payment*/\n        alert('payment successful');\n    }\n    const onOpened = () => {\n        console.log('stripe payment window opened')\n    }\n    const onClosed = () => {\n        console.log('stripe payment window closed')\n    }\n    return (\n        <StripeCheckout\n            label='Pay Now'\n            name=\"Krown Clothing\" // the pop-in header title\n            description=\"Providing you with all you your fashion since 2018\" // the pop-in header subtitle\n            image=\"https://svgshare.com/i/CUz.svg\" \n            description={`Your total is ${price}`}\n            ComponentClass=\"div\"\n            panelLabel=\"Pay Now\" // prepended to the amount in the bottom pay button\n            billingAddress\n            shippingAddress\n            amount={priceForStripe} \n            stripeKey={publishable_key}\n            currency=\"USD\"\n            email=\"support@krown_\"\n            // Note: enabling both zipCode checks and billing or shipping address will\n            // cause zipCheck to be pulled from billing address (set to shipping if none provided).\n            zipCode={false}\n            bitcoin={true}\n            allowRememberMe // \"Remember Me\" option (default true)\n            token={onToken} // submit callback\n            opened={onOpened} // called when the checkout popin is opened \n            closed={onClosed} // called when the checkout popin is closed \n            reconfigureOnUpdate={false}\n        />\n    )\n}\n\nexport default StripeCheckoutButton;"]},"metadata":{},"sourceType":"module"}