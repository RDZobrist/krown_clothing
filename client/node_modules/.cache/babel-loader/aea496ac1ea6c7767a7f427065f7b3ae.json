{"ast":null,"code":"var _jsxFileName = \"/Users/Zobrist/Desktop/Code/krown_clothing/src/components/checkout-button/stripe-button.component.jsx\";\nimport React, { useState } from \"react\";\nimport { connect } from 'react-redux';\nimport { createStructuredSelector } from \"reselect\";\nimport StripeCheckout from 'react-stripe-checkout';\nimport { selectCartToClear, selectCartHidden, selectCartItems } from \"../../redux/cart/cart.selectors\";\nimport { clearCart } from \"../../redux/cart/cart.actions\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst StripeCheckoutButton = ({\n  price\n}, cartItems) => {\n  console.log(cartItems);\n  const priceForStripe = price * 100;\n  const publishable_key = 'pk_test_51JrB82LXLc6RQBpHwh9xIxjIZEPR9vvVOlT1rcOjDXAS2gubDCmvAPsd81LoJhScB1MjcE8yxsqfbo6jX5VI8Hz300SVfgd3pf';\n\n  const onToken = token => {\n    console.log(cart);\n    clearCart(cartItems);\n    /* this is where the backend server call will be made using tokento handle the payment*/\n  };\n\n  const onOpened = () => {\n    console.log('stripe payment window opened');\n  };\n\n  const onClosed = () => {\n    console.log('stripe payment window closed');\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"total\",\n    children: /*#__PURE__*/_jsxDEV(StripeCheckout, {\n      label: `Pay Now ${price}`,\n      name: \"Krown Clothing\" // the pop-in header title\n      ,\n      description: \"Providing you with all you your fashion since 2018\" // the pop-in header subtitle\n      ,\n      image: \"https://svgshare.com/i/CUz.svg\",\n      description: `Your total is ${price}`,\n      ComponentClass: \"div\",\n      panelLabel: `Pay Now ${price}` // prepended to the amount in the bottom pay button\n      ,\n      billingAddress: true,\n      shippingAddress: true,\n      amount: priceForStripe,\n      stripeKey: publishable_key,\n      currency: \"USD\",\n      email: \"support@krown_clothing.io\" // Note: enabling both zipCode checks and billing or shipping address will\n      // cause zipCheck to be pulled from billing address (set to shipping if none provided).\n      ,\n      zipCode: false,\n      allowRememberMe: true // \"Remember Me\" option (default true)\n      ,\n      token: onToken // submit callback\n      ,\n      opened: onOpened // called when the checkout popin is opened \n      ,\n      closed: onClosed // called when the checkout popin is closed \n      ,\n      reconfigureOnUpdate: false\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 9\n  }, this);\n};\n\n_c = StripeCheckoutButton;\n\nconst mapStateToProps = state => ({\n  cartItems: selectCartItems(state)\n});\n\nexport default connect(mapStateToProps)(StripeCheckoutButton);\n\nvar _c;\n\n$RefreshReg$(_c, \"StripeCheckoutButton\");","map":{"version":3,"sources":["/Users/Zobrist/Desktop/Code/krown_clothing/src/components/checkout-button/stripe-button.component.jsx"],"names":["React","useState","connect","createStructuredSelector","StripeCheckout","selectCartToClear","selectCartHidden","selectCartItems","clearCart","StripeCheckoutButton","price","cartItems","console","log","priceForStripe","publishable_key","onToken","token","cart","onOpened","onClosed","mapStateToProps","state"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,wBAAT,QAAyC,UAAzC;AACA,OAAOC,cAAP,MAA2B,uBAA3B;AACA,SAASC,iBAAT,EAA4BC,gBAA5B,EAA8CC,eAA9C,QAAqE,iCAArE;AACA,SAASC,SAAT,QAA0B,+BAA1B;;;AACA,MAAMC,oBAAoB,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,EAAYC,SAAZ,KAA0B;AACnDC,EAAAA,OAAO,CAACC,GAAR,CAAYF,SAAZ;AACA,QAAMG,cAAc,GAAGJ,KAAK,GAAG,GAA/B;AACA,QAAMK,eAAe,GAAG,6GAAxB;;AAEA,QAAMC,OAAO,GAAGC,KAAK,IAAI;AACrBL,IAAAA,OAAO,CAACC,GAAR,CAAYK,IAAZ;AACAV,IAAAA,SAAS,CAACG,SAAD,CAAT;AACA;AACH,GAJD;;AAKA,QAAMQ,QAAQ,GAAG,MAAM;AACnBP,IAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ;AACH,GAFD;;AAGA,QAAMO,QAAQ,GAAG,MAAM;AACnBR,IAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ;AACH,GAFD;;AAGA,sBACI;AAAK,IAAA,SAAS,EAAC,OAAf;AAAA,2BACA,QAAC,cAAD;AACI,MAAA,KAAK,EAAG,WAAUH,KAAM,EAD5B;AAEI,MAAA,IAAI,EAAC,gBAFT,CAE0B;AAF1B;AAGI,MAAA,WAAW,EAAC,oDAHhB,CAGqE;AAHrE;AAII,MAAA,KAAK,EAAC,gCAJV;AAKI,MAAA,WAAW,EAAG,iBAAgBA,KAAM,EALxC;AAMI,MAAA,cAAc,EAAC,KANnB;AAOI,MAAA,UAAU,EAAG,WAAUA,KAAM,EAPjC,CAOmC;AAPnC;AAQI,MAAA,cAAc,MARlB;AASI,MAAA,eAAe,MATnB;AAUI,MAAA,MAAM,EAAEI,cAVZ;AAWI,MAAA,SAAS,EAAEC,eAXf;AAYI,MAAA,QAAQ,EAAC,KAZb;AAaI,MAAA,KAAK,EAAC,2BAbV,CAcI;AACA;AAfJ;AAgBI,MAAA,OAAO,EAAE,KAhBb;AAiBI,MAAA,eAAe,MAjBnB,CAiBoB;AAjBpB;AAkBI,MAAA,KAAK,EAAEC,OAlBX,CAkBoB;AAlBpB;AAmBI,MAAA,MAAM,EAAEG,QAnBZ,CAmBsB;AAnBtB;AAoBI,MAAA,MAAM,EAAEC,QApBZ,CAoBsB;AApBtB;AAqBI,MAAA,mBAAmB,EAAE;AArBzB;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,UADJ;AA2BH,CA3CD;;KAAMX,oB;;AA4CN,MAAMY,eAAe,GAAGC,KAAK,KAAK;AAC9BX,EAAAA,SAAS,EAAEJ,eAAe,CAACe,KAAD;AADI,CAAL,CAA7B;;AAIA,eAAepB,OAAO,CAACmB,eAAD,CAAP,CAAyBZ,oBAAzB,CAAf","sourcesContent":["import React, { useState } from \"react\";\nimport { connect } from 'react-redux';\nimport { createStructuredSelector } from \"reselect\";\nimport StripeCheckout from 'react-stripe-checkout';\nimport { selectCartToClear, selectCartHidden, selectCartItems } from \"../../redux/cart/cart.selectors\";\nimport { clearCart } from \"../../redux/cart/cart.actions\";\nconst StripeCheckoutButton = ({ price }, cartItems) => {\n    console.log(cartItems)\n    const priceForStripe = price * 100;\n    const publishable_key = 'pk_test_51JrB82LXLc6RQBpHwh9xIxjIZEPR9vvVOlT1rcOjDXAS2gubDCmvAPsd81LoJhScB1MjcE8yxsqfbo6jX5VI8Hz300SVfgd3pf';\n\n    const onToken = token => {\n        console.log(cart);\n        clearCart(cartItems)\n        /* this is where the backend server call will be made using tokento handle the payment*/\n    }\n    const onOpened = () => {\n        console.log('stripe payment window opened')\n    }\n    const onClosed = () => {\n        console.log('stripe payment window closed')\n    }\n    return (\n        <div className=\"total\">\n        <StripeCheckout\n            label={`Pay Now ${price}`}\n            name=\"Krown Clothing\" // the pop-in header title\n            description=\"Providing you with all you your fashion since 2018\" // the pop-in header subtitle\n            image=\"https://svgshare.com/i/CUz.svg\" \n            description={`Your total is ${price}`}\n            ComponentClass=\"div\"\n            panelLabel={`Pay Now ${price}`}// prepended to the amount in the bottom pay button\n            billingAddress\n            shippingAddress\n            amount={priceForStripe} \n            stripeKey={publishable_key}\n            currency=\"USD\"\n            email=\"support@krown_clothing.io\"\n            // Note: enabling both zipCode checks and billing or shipping address will\n            // cause zipCheck to be pulled from billing address (set to shipping if none provided).\n            zipCode={false}\n            allowRememberMe // \"Remember Me\" option (default true)\n            token={onToken} // submit callback\n            opened={onOpened} // called when the checkout popin is opened \n            closed={onClosed} // called when the checkout popin is closed \n            reconfigureOnUpdate={false}\n        />\n        </div>\n    )\n}\nconst mapStateToProps = state => ({\n    cartItems: selectCartItems(state)\n  });\n  \nexport default connect(mapStateToProps)(StripeCheckoutButton);"]},"metadata":{},"sourceType":"module"}