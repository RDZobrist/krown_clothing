{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst requestPromise = require(\"request-promise-native\");\n\nconst types_1 = require(\"../util/types\");\n\nconst os = require('os');\n\nconst proxyError = result => {\n  const isTaxjarError = result.statusCode && result.error && result.error.error && result.error.detail;\n\n  if (isTaxjarError) {\n    throw new types_1.TaxjarError(result.error.error, result.error.detail, result.statusCode);\n  }\n\n  throw result;\n};\n\nconst getUserAgent = () => {\n  const platform = os.version && os.version() || process.platform;\n  const arch = os.arch();\n  const nodeVersion = `${process.release.name} ${process.versions.node}`;\n  const openSslVersion = `OpenSSL/${process.versions.openssl}`;\n  const pkgVersion = `taxjar-node/${require('../../package.json').version}`;\n  return `TaxJar/Node (${[platform, arch, nodeVersion, openSslVersion].join('; ')}) ${pkgVersion}`;\n};\n\nexports.default = config => {\n  const request = requestPromise.defaults({\n    headers: Object.assign({}, config.headers || {}, {\n      Authorization: `Bearer ${config.apiKey}`,\n      'Content-Type': 'application/json',\n      'User-Agent': getUserAgent()\n    }),\n    baseUrl: config.apiUrl,\n    json: true\n  });\n  return {\n    get: options => request.get(options.url, {\n      qs: options.params\n    }).catch(proxyError),\n    post: options => request.post(options.url, {\n      body: options.params\n    }).catch(proxyError),\n    put: options => request.put(options.url, {\n      body: options.params\n    }).catch(proxyError),\n    delete: options => request.delete(options.url, {\n      qs: options.params\n    }).catch(proxyError)\n  };\n};","map":{"version":3,"sources":["/Users/Zobrist/Desktop/Code/node_modules/.pnpm/taxjar@4.0.0/node_modules/taxjar/dist/util/request.js"],"names":["Object","defineProperty","exports","value","requestPromise","require","types_1","os","proxyError","result","isTaxjarError","statusCode","error","detail","TaxjarError","getUserAgent","platform","version","process","arch","nodeVersion","release","name","versions","node","openSslVersion","openssl","pkgVersion","join","default","config","request","defaults","headers","assign","Authorization","apiKey","baseUrl","apiUrl","json","get","options","url","qs","params","catch","post","body","put","delete"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst requestPromise = require(\"request-promise-native\");\nconst types_1 = require(\"../util/types\");\nconst os = require('os');\nconst proxyError = (result) => {\n    const isTaxjarError = result.statusCode && result.error && result.error.error && result.error.detail;\n    if (isTaxjarError) {\n        throw new types_1.TaxjarError(result.error.error, result.error.detail, result.statusCode);\n    }\n    throw result;\n};\nconst getUserAgent = () => {\n    const platform = os.version && os.version() || process.platform;\n    const arch = os.arch();\n    const nodeVersion = `${process.release.name} ${process.versions.node}`;\n    const openSslVersion = `OpenSSL/${process.versions.openssl}`;\n    const pkgVersion = `taxjar-node/${require('../../package.json').version}`;\n    return `TaxJar/Node (${[platform, arch, nodeVersion, openSslVersion].join('; ')}) ${pkgVersion}`;\n};\nexports.default = (config) => {\n    const request = requestPromise.defaults({\n        headers: Object.assign({}, config.headers || {}, {\n            Authorization: `Bearer ${config.apiKey}`,\n            'Content-Type': 'application/json',\n            'User-Agent': getUserAgent()\n        }),\n        baseUrl: config.apiUrl,\n        json: true\n    });\n    return {\n        get: options => request.get(options.url, { qs: options.params }).catch(proxyError),\n        post: options => request.post(options.url, { body: options.params }).catch(proxyError),\n        put: options => request.put(options.url, { body: options.params }).catch(proxyError),\n        delete: options => request.delete(options.url, { qs: options.params }).catch(proxyError)\n    };\n};\n"]},"metadata":{},"sourceType":"script"}