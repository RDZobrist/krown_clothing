{"ast":null,"code":"import ShopActionTypes from\"./shop.types\";import{firestore,convertCollectionsSnapshotToMap}from\"../../firebase/firebase.utils\";export var fetchCollectionStart=function fetchCollectionStart(){return{type:ShopActionTypes.FETCH_COLLECTIONS_START};};export var fetchCollectionStartAsync=function fetchCollectionStartAsync(){return function(dispatch){var collectionRef=firestore.collection('collections');dispatch(fetchCollectionStart());collectionRef.get().then(function(snapshot){var collectionsMap=convertCollectionsSnapshotToMap(snapshot);dispatch(fetchCollectionSuccess(collectionsMap));}).catch(function(error){return dispatch(fetchCollectionFailure(error.message));});};};export var fetchCollectionSuccess=function fetchCollectionSuccess(collectionsMap){return{type:ShopActionTypes.FETCH_COLLECTIONS_SUCCESS,payload:collectionsMap};};export var fetchCollectionFailure=function fetchCollectionFailure(errorMessage){return{type:ShopActionTypes.FETCH_COLLECTIONS_FAILURE,payload:errorMessage};};","map":{"version":3,"sources":["/Users/Zobrist/Desktop/Code/krown_clothing/client/src/redux/shop/shop.actions.js"],"names":["ShopActionTypes","firestore","convertCollectionsSnapshotToMap","fetchCollectionStart","type","FETCH_COLLECTIONS_START","fetchCollectionStartAsync","dispatch","collectionRef","collection","get","then","snapshot","collectionsMap","fetchCollectionSuccess","catch","error","fetchCollectionFailure","message","FETCH_COLLECTIONS_SUCCESS","payload","errorMessage","FETCH_COLLECTIONS_FAILURE"],"mappings":"AAAA,MAAOA,CAAAA,eAAP,KAA4B,cAA5B,CAEA,OAASC,SAAT,CAAoBC,+BAApB,KAA2D,+BAA3D,CAGA,MAAO,IAAMC,CAAAA,oBAAoB,CAAI,QAAxBA,CAAAA,oBAAwB,SAAO,CACxCC,IAAI,CAAEJ,eAAe,CAACK,uBADkB,CAAP,EAA9B,CAIP,MAAO,IAAMC,CAAAA,yBAAyB,CAAG,QAA5BA,CAAAA,yBAA4B,EAAM,CAC3C,MAAO,UAAAC,QAAQ,CAAI,CACf,GAAMC,CAAAA,aAAa,CAAGP,SAAS,CAACQ,UAAV,CAAqB,aAArB,CAAtB,CACAF,QAAQ,CAACJ,oBAAoB,EAArB,CAAR,CACAK,aAAa,CAACE,GAAd,GAAoBC,IAApB,CAAyB,SAAAC,QAAQ,CAAI,CACjC,GAAMC,CAAAA,cAAc,CAAGX,+BAA+B,CAACU,QAAD,CAAtD,CACAL,QAAQ,CAACO,sBAAsB,CAACD,cAAD,CAAvB,CAAR,CACH,CAHD,EAGGE,KAHH,CAGS,SAAAC,KAAK,QAAIT,CAAAA,QAAQ,CAACU,sBAAsB,CAACD,KAAK,CAACE,OAAP,CAAvB,CAAZ,EAHd,EAMH,CATD,CAUH,CAXM,CAaP,MAAO,IAAMJ,CAAAA,sBAAsB,CAAG,QAAzBA,CAAAA,sBAAyB,CAAAD,cAAc,QAAK,CACrDT,IAAI,CAAEJ,eAAe,CAACmB,yBAD+B,CAErDC,OAAO,CAAEP,cAF4C,CAAL,EAA7C,CAKP,MAAO,IAAMI,CAAAA,sBAAsB,CAAG,QAAzBA,CAAAA,sBAAyB,CAAAI,YAAY,QAAK,CACnDjB,IAAI,CAAEJ,eAAe,CAACsB,yBAD6B,CAEnDF,OAAO,CAAEC,YAF0C,CAAL,EAA3C","sourcesContent":["import ShopActionTypes from \"./shop.types\";\n\nimport { firestore, convertCollectionsSnapshotToMap } from \"../../firebase/firebase.utils\";\n\n\nexport const fetchCollectionStart =  () => ({\n    type: ShopActionTypes.FETCH_COLLECTIONS_START,\n});\n\nexport const fetchCollectionStartAsync = () => {\n    return dispatch => {\n        const collectionRef = firestore.collection('collections');\n        dispatch(fetchCollectionStart());\n        collectionRef.get().then(snapshot => {\n            const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n            dispatch(fetchCollectionSuccess(collectionsMap))\n        }).catch(error => dispatch(fetchCollectionFailure(error.message)))\n       \n   \n    }\n}\n\nexport const fetchCollectionSuccess = collectionsMap => ({\n    type: ShopActionTypes.FETCH_COLLECTIONS_SUCCESS,\n    payload: collectionsMap\n})\n\nexport const fetchCollectionFailure = errorMessage => ({\n    type: ShopActionTypes.FETCH_COLLECTIONS_FAILURE,\n    payload: errorMessage\n})"]},"metadata":{},"sourceType":"module"}