{"ast":null,"code":"import { takeLatest, put, all, call } from \"redux-saga/effects\";\nimport { auth, googleProvider, createUserProfileDocument } from \"../../firebase/firebase.utils\";\nimport UserActionTypes from \"./user.types\";\nimport { googleSigninSuccess, googleSigninFailure, emailSigninSuccess, emailSigninFailure, signupFailure } from './user.actions';\nexport function* signupWithEmailandPwd({\n  payload: {\n    email,\n    password,\n    displayName\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield auth.createUserWithEmailAndPassword(email, password);\n    yield put(signupSuccess({\n      user,\n      additionalData: {\n        displayName\n      }\n    }));\n  } catch (error) {\n    yield put(signupFailure(error));\n  }\n}\n;\nexport function* onSignUpSuccess() {\n  yield takeLatest(UserActionTypes.SIGN_UP_SUCCESS, signInAfterSignUp);\n}\n;\nexport function* signinAfterSignup({\n  payload: {\n    user,\n    additionalData\n  }\n}) {\n  yield getSnapshotFromUserAuth(user, additionalData);\n}\n;\nexport function* signinWithGoogle() {\n  try {\n    const {\n      user\n    } = yield auth.signInWithPopup(googleProvider);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(googleSigninFailure(error));\n  }\n}\n;\nexport function* signinWithEmailandPwd({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield auth.signInWithEmailAndPassword(email, password);\n    const userRef = yield call(createUserProfileDocument, user);\n    const userSnapshot = yield userRef.get();\n    console.log(user);\n    yield put(emailSigninSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n  } catch (error) {\n    put(emailSigninFailure(error));\n  }\n}\n;\nexport function* onGoogleSignInStart() {\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signinWithGoogle);\n}\n;\nexport function* onEmailSigninStart() {\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signinWithEmailandPwd);\n}\n;\nexport function* onSignupStart() {\n  yield takeLatest(UserActionTypes.SIGN_UP_START, signupWithEmailandPwd);\n}\n;\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStart), call(onEmailSigninStart)]);\n}","map":{"version":3,"sources":["/Users/Zobrist/Desktop/Code/krown_clothing/src/redux/user/user.sagas.js"],"names":["takeLatest","put","all","call","auth","googleProvider","createUserProfileDocument","UserActionTypes","googleSigninSuccess","googleSigninFailure","emailSigninSuccess","emailSigninFailure","signupFailure","signupWithEmailandPwd","payload","email","password","displayName","user","createUserWithEmailAndPassword","signupSuccess","additionalData","error","onSignUpSuccess","SIGN_UP_SUCCESS","signInAfterSignUp","signinAfterSignup","getSnapshotFromUserAuth","signinWithGoogle","signInWithPopup","signinWithEmailandPwd","signInWithEmailAndPassword","userRef","userSnapshot","get","console","log","id","data","onGoogleSignInStart","GOOGLE_SIGN_IN_START","onEmailSigninStart","EMAIL_SIGN_IN_START","onSignupStart","SIGN_UP_START","userSagas"],"mappings":"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","sourcesContent":["import { takeLatest, put, all, call } from \"redux-saga/effects\";\nimport {\n  auth,\n  googleProvider,\n  createUserProfileDocument,\n \n} from \"../../firebase/firebase.utils\";\nimport UserActionTypes from \"./user.types\";\nimport {\n  googleSigninSuccess,\n  googleSigninFailure,\n  emailSigninSuccess,\n  emailSigninFailure,\n  signupFailure\n} from './user.actions';\n\n\n\n\n\n\n\nexport function* signupWithEmailandPwd({payload: { email, password, displayName}}){\n  try {\n    const { user } = yield auth.createUserWithEmailAndPassword(\n      email,\n      password\n    );\n    yield put(signupSuccess({ user, additionalData: { displayName } }));\n    }\n   catch (error) {\n    yield put(signupFailure(error))\n  }\n};\n\nexport function* onSignUpSuccess() {\n  yield takeLatest(UserActionTypes.SIGN_UP_SUCCESS, signInAfterSignUp);\n};\n\nexport function* signinAfterSignup({ payload: { user, additionalData } }) {\n  yield getSnapshotFromUserAuth(user, additionalData);\n};\n\n\n\nexport function* signinWithGoogle() {\n  try {\n    const { user } = yield auth.signInWithPopup(googleProvider);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(googleSigninFailure(error));\n  }\n};\n\nexport function* signinWithEmailandPwd({payload: { email, password}}) {\n  try {\n    const { user } = yield auth.signInWithEmailAndPassword(email, password);\n    const userRef = yield call(createUserProfileDocument, user);\n    const userSnapshot = yield userRef.get();\n    console.log(user)\n    yield put(\n      emailSigninSuccess({ id: userSnapshot.id, ...userSnapshot.data()})\n    )\n\n  }catch(error){\n    put(emailSigninFailure(error))\n  }\n};\n\n\nexport function* onGoogleSignInStart() {\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signinWithGoogle);\n};\nexport function* onEmailSigninStart() {\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signinWithEmailandPwd)\n};\nexport function* onSignupStart() {\n  yield takeLatest(UserActionTypes.SIGN_UP_START, signupWithEmailandPwd);\n};\n\nexport function* userSagas() {\n  yield all([\n    call(onGoogleSignInStart),\n    call(onEmailSigninStart)\n  ])\n}"]},"metadata":{},"sourceType":"module"}