{"ast":null,"code":"import firebase from 'firebase/compat/app';\nimport 'firebase/compat/firestore';\nimport 'firebase/compat/auth';\nimport { FacebookAuthProvider, signInWithPopup } from 'firebase/auth';\nexport const signInWithFacebook = () => signInWithPopup(auth, facebookProvider).then(result => {\n  // The signed-in user info.\n  const user = result.user; // This gives you a Facebook Access Token. You can use it to access the Facebook API.\n\n  const credential = FacebookAuthProvider.credentialFromResult(result);\n  const accessToken = credential.accessToken;\n  const resultObject = {\n    user,\n    credential,\n    accessToken\n  };\n  return console.log(resultObject); // ...\n}).catch(error => {\n  // Handle Errors here.\n  const errorCode = error.code;\n  const errorMessage = error.message; // The email of the user's account used.\n\n  const email = error.email; // The AuthCredential type that was used.\n\n  const credential = FacebookAuthProvider.credentialFromError(error);\n  console.log(error); // ...\n});\nconst firebaseConfig = {\n  apiKey: \"AIzaSyCnPhU5FOQJ5iWGPtNYnNYhC2jZJglQ0DM\",\n  authDomain: \"krownclothingdb.firebaseapp.com\",\n  projectId: \"krownclothingdb\",\n  storageBucket: \"krownclothingdb.appspot.com\",\n  messagingSenderId: \"677870554234\",\n  appId: \"1:677870554234:web:1a64600583e3b6042d7fc3\",\n  measurementId: \"G-XNXCM6FTL2\"\n};\nfirebase.initializeApp(firebaseConfig);\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  const snapShot = await userRef.get();\n\n  if (!snapShot.exists) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await userRef.set({\n        adminSuper: false,\n        admin: false,\n        manager: false,\n        displayName,\n        email,\n        createdAt,\n        ...additionalData\n      });\n    } catch (error) {\n      console.log('error creating user', error.message);\n    }\n  }\n\n  return userRef;\n};\nexport const addCollectionAndDocuments = async (collectionKey, objectsToAdd) => {\n  const collectionRef = firestore.collection(collectionKey);\n  const batch = firestore.batch();\n  objectsToAdd.forEach(obj => {\n    const newDocRef = collectionRef.doc();\n    batch.set(newDocRef, obj);\n  });\n  return await batch.commit();\n};\nexport const convertCollectionsSnapshotToMap = collections => {\n  const transformedCollection = collections.docs.map(doc => {\n    const {\n      title,\n      items\n    } = doc.data();\n    return {\n      routeName: encodeURI(title.toLowerCase()),\n      id: doc.id,\n      title,\n      items\n    };\n  });\n  return transformedCollection.reduce((accumulator, collection) => {\n    accumulator[collection.title.toLowerCase()] = collection;\n    return accumulator;\n  }, {});\n};\nexport const getCurrentUser = () => {\n  return new Promise((resolve, reject) => {\n    const unsubscribe = auth.onAuthStateChanged(userAuth => {\n      unsubscribe();\n      resolve;\n    });\n  });\n};\nexport const auth = firebase.auth();\nexport const googleProvider = new firebase.auth.GoogleAuthProvider();\ngoogleProvider.setCustomParameters({\n  prompt: 'select_account'\n});\nexport const facebookProvider = new firebase.auth.FacebookAuthProvider();\nfacebookProvider.setCustomParameters({\n  'display': 'popup'\n});\nexport const firestore = firebase.firestore(); // export const signInWithGoogle = () => auth.signInWithPopup(googleProvider);\n\nexport default firebase;","map":{"version":3,"sources":["/Users/Zobrist/Desktop/Code/krown_clothing/src/firebase/firebase.utils.js"],"names":["firebase","FacebookAuthProvider","signInWithPopup","signInWithFacebook","auth","facebookProvider","then","result","user","credential","credentialFromResult","accessToken","resultObject","console","log","catch","error","errorCode","code","errorMessage","message","email","credentialFromError","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","initializeApp","createUserProfileDocument","userAuth","additionalData","userRef","firestore","doc","uid","snapShot","get","exists","displayName","createdAt","Date","set","adminSuper","admin","manager","addCollectionAndDocuments","collectionKey","objectsToAdd","collectionRef","collection","batch","forEach","obj","newDocRef","commit","convertCollectionsSnapshotToMap","collections","transformedCollection","docs","map","title","items","data","routeName","encodeURI","toLowerCase","id","reduce","accumulator","getCurrentUser","Promise","resolve","reject","unsubscribe","onAuthStateChanged","googleProvider","GoogleAuthProvider","setCustomParameters","prompt"],"mappings":"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","sourcesContent":["import firebase from 'firebase/compat/app';\nimport 'firebase/compat/firestore';\nimport 'firebase/compat/auth';\nimport {FacebookAuthProvider, signInWithPopup} from 'firebase/auth';\n\n\n\n\nexport const signInWithFacebook = ()=>(\n  signInWithPopup(auth, facebookProvider)\n  .then((result) => {\n    // The signed-in user info.\n    const user = result.user;\n    // This gives you a Facebook Access Token. You can use it to access the Facebook API.\n    const credential = FacebookAuthProvider.credentialFromResult(result);\n    const accessToken = credential.accessToken;\n    const resultObject = {\n      user,\n      credential,\n      accessToken\n    }\n    return console.log(resultObject)\n    // ...\n  })\n  .catch((error) => {\n    // Handle Errors here.\n    const errorCode = error.code;\n    const errorMessage = error.message;\n    // The email of the user's account used.\n    const email = error.email;\n    // The AuthCredential type that was used.\n    const credential = FacebookAuthProvider.credentialFromError(error);\n    console.log(error)\n    // ...\n  })\n)\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyCnPhU5FOQJ5iWGPtNYnNYhC2jZJglQ0DM\",\n    authDomain: \"krownclothingdb.firebaseapp.com\",\n    projectId: \"krownclothingdb\",\n    storageBucket: \"krownclothingdb.appspot.com\",\n    messagingSenderId: \"677870554234\",\n    appId: \"1:677870554234:web:1a64600583e3b6042d7fc3\",\n    measurementId: \"G-XNXCM6FTL2\"\n  };\n  firebase.initializeApp(firebaseConfig);\n\n  export const createUserProfileDocument = async (userAuth, additionalData) => {\n    if (!userAuth) return;\n\n    const userRef = firestore.doc(`users/${userAuth.uid}`);\n    const snapShot = await userRef.get();\n\n    if (!snapShot.exists) {\n      const { displayName, email } = userAuth;\n      const createdAt = new Date();\n      try {\n        await userRef.set({\n          adminSuper: false,\n          admin: false,\n          manager: false,\n          displayName,\n          email,\n          createdAt,\n          ...additionalData\n        });\n      } catch (error) {\n        console.log('error creating user', error.message);\n      }\n    }\n  \n    return userRef;\n  };\n  \nexport const addCollectionAndDocuments = async (\n  collectionKey,\n  objectsToAdd\n) => {\n  const collectionRef = firestore.collection(collectionKey);\n\n  const batch = firestore.batch();\n  objectsToAdd.forEach(obj => {\n    const newDocRef = collectionRef.doc();\n    batch.set(newDocRef, obj);\n  });\n\n  return await batch.commit();\n};\n\nexport const convertCollectionsSnapshotToMap = collections => {\n  const transformedCollection = collections.docs.map(doc => {\n    const { title, items } = doc.data();\n\n    return {\n      routeName: encodeURI(title.toLowerCase()),\n      id: doc.id,\n      title,\n      items\n    };\n  });\n\n  return transformedCollection.reduce((accumulator, collection) => {\n    accumulator[collection.title.toLowerCase()] = collection;\n    return accumulator;\n  }, {});\n};\n\nexport const getCurrentUser = () => {\n  return new Promise((resolve, reject)=>{\n    const unsubscribe = auth.onAuthStateChanged(userAuth => {\n      unsubscribe();\n      resolve\n    })\n  });\n};\n\nexport const auth = firebase.auth();\n\nexport const googleProvider = new firebase.auth.GoogleAuthProvider();\ngoogleProvider.setCustomParameters({ prompt: 'select_account' }); \n\nexport const facebookProvider = new firebase.auth.FacebookAuthProvider();\nfacebookProvider.setCustomParameters({ 'display': 'popup' });\n\n  export const firestore = firebase.firestore();\n  // export const signInWithGoogle = () => auth.signInWithPopup(googleProvider);\n  export default firebase;"]},"metadata":{},"sourceType":"module"}