{"ast":null,"code":"import firebase from 'firebase/compat/app';\nimport 'firebase/compat/firestore';\nimport 'firebase/compat/auth';\nimport { FacebookAuthProvider, getAuth, signInWithPopup } from 'firebase/auth';\nexport const signInWithFacebook = () => signInWithPopup(auth, fbProvider).then(result => {\n  // The signed-in user info.\n  const user = result.user; // This gives you a Facebook Access Token. You can use it to access the Facebook API.\n\n  const credential = FacebookAuthProvider.credentialFromResult(result);\n  const accessToken = credential.accessToken;\n  const resultObject = {\n    user,\n    credential,\n    accessToken\n  };\n  return console.log(resultObject); // ...\n}).catch(error => {\n  // Handle Errors here.\n  const errorCode = error.code;\n  const errorMessage = error.message; // The email of the user's account used.\n\n  const email = error.email; // The AuthCredential type that was used.\n\n  const credential = FacebookAuthProvider.credentialFromError(error);\n  console.log(error); // ...\n});\nconst firebaseConfig = {\n  apiKey: \"AIzaSyCnPhU5FOQJ5iWGPtNYnNYhC2jZJglQ0DM\",\n  authDomain: \"krownclothingdb.firebaseapp.com\",\n  projectId: \"krownclothingdb\",\n  storageBucket: \"krownclothingdb.appspot.com\",\n  messagingSenderId: \"677870554234\",\n  appId: \"1:677870554234:web:1a64600583e3b6042d7fc3\",\n  measurementId: \"G-XNXCM6FTL2\"\n};\nfirebase.initializeApp(firebaseConfig);\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  const collectionRef = firestore.collection('users');\n  const snapShot = await userRef.get();\n  const collectionSnapshot = await collectionRef.get();\n  console.log(snapShot.data());\n  console.log({\n    collection: collectionSnapshot.docs.map(doc => doc.data())\n  }); // console.log(collectionSnapshot.data())\n\n  if (!snapShot.exists) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData\n      });\n    } catch (error) {\n      console.log('error creating user', error.message);\n    }\n  }\n\n  return userRef;\n};\nexport const addCollectionAndDocuments = (collectionkey, objectsToAdd) => {\n  const collectionRef = firestore.collection(collectionkey);\n  const batch = firestore.batch();\n  objectsToAdd.forEa;\n};\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({\n  prompt: 'select_account'\n});\nconst fbProvider = new firebase.auth.FacebookAuthProvider();\nfbProvider.setCustomParameters({\n  'display': 'popup'\n});\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\nexport default firebase;","map":{"version":3,"sources":["/Users/Zobrist/Desktop/Code/krown_clothing/src/firebase/firebase.utils.js"],"names":["firebase","FacebookAuthProvider","getAuth","signInWithPopup","signInWithFacebook","auth","fbProvider","then","result","user","credential","credentialFromResult","accessToken","resultObject","console","log","catch","error","errorCode","code","errorMessage","message","email","credentialFromError","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","initializeApp","createUserProfileDocument","userAuth","additionalData","userRef","firestore","doc","uid","collectionRef","collection","snapShot","get","collectionSnapshot","data","docs","map","exists","displayName","createdAt","Date","set","addCollectionAndDocuments","collectionkey","objectsToAdd","batch","forEa","provider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle"],"mappings":"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","sourcesContent":["import firebase from 'firebase/compat/app';\nimport 'firebase/compat/firestore';\nimport 'firebase/compat/auth';\nimport {FacebookAuthProvider, getAuth, signInWithPopup} from 'firebase/auth';\n\n\n\n\nexport const signInWithFacebook = ()=>(\n  signInWithPopup(auth, fbProvider)\n  .then((result) => {\n    // The signed-in user info.\n    const user = result.user;\n    // This gives you a Facebook Access Token. You can use it to access the Facebook API.\n    const credential = FacebookAuthProvider.credentialFromResult(result);\n    const accessToken = credential.accessToken;\n    const resultObject = {\n      user,\n      credential,\n      accessToken\n    }\n    return console.log(resultObject)\n    // ...\n  })\n  .catch((error) => {\n    // Handle Errors here.\n    const errorCode = error.code;\n    const errorMessage = error.message;\n    // The email of the user's account used.\n    const email = error.email;\n    // The AuthCredential type that was used.\n    const credential = FacebookAuthProvider.credentialFromError(error);\n    console.log(error)\n    // ...\n  })\n)\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyCnPhU5FOQJ5iWGPtNYnNYhC2jZJglQ0DM\",\n    authDomain: \"krownclothingdb.firebaseapp.com\",\n    projectId: \"krownclothingdb\",\n    storageBucket: \"krownclothingdb.appspot.com\",\n    messagingSenderId: \"677870554234\",\n    appId: \"1:677870554234:web:1a64600583e3b6042d7fc3\",\n    measurementId: \"G-XNXCM6FTL2\"\n  };\n  firebase.initializeApp(firebaseConfig);\n\n  export const createUserProfileDocument = async (userAuth, additionalData) => {\n    if (!userAuth) return;\n  \n    const userRef = firestore.doc(`users/${userAuth.uid}`);\n    const collectionRef = firestore.collection('users');\n    const snapShot = await userRef.get();\n    const collectionSnapshot = await collectionRef.get();\n    console.log(snapShot.data())\n    console.log({collection:collectionSnapshot.docs.map(doc=>doc.data())});\n    // console.log(collectionSnapshot.data())\n\n    if (!snapShot.exists) {\n      const { displayName, email } = userAuth;\n      const createdAt = new Date();\n      try {\n        await userRef.set({\n          displayName,\n          email,\n          createdAt,\n          ...additionalData\n        });\n      } catch (error) {\n        console.log('error creating user', error.message);\n      }\n    }\n  \n    return userRef;\n  };\n  \n\n\nexport const addCollectionAndDocuments = (collectionkey, objectsToAdd) => {\n  const collectionRef = firestore.collection(collectionkey);\n  \n\n  const batch = firestore.batch()\n  objectsToAdd.forEa\n}\n \n\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({ prompt: 'select_account' }); \n\nconst fbProvider = new firebase.auth.FacebookAuthProvider();\nfbProvider.setCustomParameters({\n  'display': 'popup'\n});\n  export const auth = firebase.auth();\n  export const firestore = firebase.firestore();\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\nexport default firebase;"]},"metadata":{},"sourceType":"module"}