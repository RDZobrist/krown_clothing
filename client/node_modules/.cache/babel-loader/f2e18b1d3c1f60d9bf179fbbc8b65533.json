{"ast":null,"code":"\"use strict\";\n\nconst request_1 = require(\"./util/request\");\n\nconst TaxjarTypes = require(\"./util/types\");\n\nclass Taxjar {\n  constructor(config) {\n    let apiUrl = Taxjar.DEFAULT_API_URL + '/' + Taxjar.API_VERSION + '/';\n\n    if (!config || !config['apiKey']) {\n      throw new Error('Please provide a TaxJar API key');\n    }\n\n    if (config && config['apiUrl']) {\n      apiUrl = config['apiUrl'] + '/' + Taxjar.API_VERSION + '/';\n    }\n\n    this.config = {\n      apiUrl: apiUrl,\n      apiKey: config['apiKey'],\n      headers: config['headers']\n    };\n    this.request = request_1.default(this.config);\n  }\n\n  getApiConfig(index) {\n    return this.config[index];\n  }\n\n  setApiConfig(index, value) {\n    if (index === 'apiUrl') {\n      value += '/' + Taxjar.API_VERSION + '/';\n    }\n\n    this.config[index] = value;\n    this.request = request_1.default(this.config);\n  }\n\n  categories() {\n    return this.request.get({\n      url: 'categories'\n    });\n  }\n\n  taxForOrder(params) {\n    return this.request.post({\n      url: 'taxes',\n      params\n    });\n  }\n\n  listOrders(params) {\n    return this.request.get({\n      url: 'transactions/orders',\n      params\n    });\n  }\n\n  showOrder(transactionId, params) {\n    return this.request.get({\n      url: 'transactions/orders/' + transactionId,\n      params\n    });\n  }\n\n  createOrder(params) {\n    return this.request.post({\n      url: 'transactions/orders',\n      params\n    });\n  }\n\n  updateOrder(params) {\n    return this.request.put({\n      url: 'transactions/orders/' + params.transaction_id,\n      params\n    });\n  }\n\n  deleteOrder(transactionId, params) {\n    return this.request.delete({\n      url: 'transactions/orders/' + transactionId,\n      params\n    });\n  }\n\n  listRefunds(params) {\n    return this.request.get({\n      url: 'transactions/refunds',\n      params\n    });\n  }\n\n  showRefund(transactionId, params) {\n    return this.request.get({\n      url: 'transactions/refunds/' + transactionId,\n      params\n    });\n  }\n\n  createRefund(params) {\n    return this.request.post({\n      url: 'transactions/refunds',\n      params\n    });\n  }\n\n  updateRefund(params) {\n    return this.request.put({\n      url: 'transactions/refunds/' + params.transaction_id,\n      params\n    });\n  }\n\n  deleteRefund(transactionId, params) {\n    return this.request.delete({\n      url: 'transactions/refunds/' + transactionId,\n      params\n    });\n  }\n\n  listCustomers() {\n    return this.request.get({\n      url: 'customers'\n    });\n  }\n\n  showCustomer(customerId) {\n    return this.request.get({\n      url: 'customers/' + customerId\n    });\n  }\n\n  createCustomer(params) {\n    return this.request.post({\n      url: 'customers',\n      params\n    });\n  }\n\n  updateCustomer(params) {\n    return this.request.put({\n      url: 'customers/' + params.customer_id,\n      params\n    });\n  }\n\n  deleteCustomer(customerId) {\n    return this.request.delete({\n      url: 'customers/' + customerId\n    });\n  }\n\n  ratesForLocation(zip, params) {\n    return this.request.get({\n      url: 'rates/' + zip,\n      params\n    });\n  }\n\n  nexusRegions() {\n    return this.request.get({\n      url: 'nexus/regions'\n    });\n  }\n\n  validateAddress(params) {\n    return this.request.post({\n      url: 'addresses/validate',\n      params\n    });\n  }\n\n  validate(params) {\n    return this.request.get({\n      url: 'validation',\n      params\n    });\n  }\n\n  summaryRates() {\n    return this.request.get({\n      url: 'summary_rates'\n    });\n  }\n\n}\n\nTaxjar.DEFAULT_API_URL = 'https://api.taxjar.com';\nTaxjar.SANDBOX_API_URL = 'https://api.sandbox.taxjar.com';\nTaxjar.API_VERSION = 'v2';\nTaxjar.Error = TaxjarTypes.TaxjarError;\nmodule.exports = Taxjar;","map":{"version":3,"sources":["/Users/Zobrist/Desktop/Code/node_modules/.pnpm/taxjar@4.0.0/node_modules/taxjar/dist/taxjar.js"],"names":["request_1","require","TaxjarTypes","Taxjar","constructor","config","apiUrl","DEFAULT_API_URL","API_VERSION","Error","apiKey","headers","request","default","getApiConfig","index","setApiConfig","value","categories","get","url","taxForOrder","params","post","listOrders","showOrder","transactionId","createOrder","updateOrder","put","transaction_id","deleteOrder","delete","listRefunds","showRefund","createRefund","updateRefund","deleteRefund","listCustomers","showCustomer","customerId","createCustomer","updateCustomer","customer_id","deleteCustomer","ratesForLocation","zip","nexusRegions","validateAddress","validate","summaryRates","SANDBOX_API_URL","TaxjarError","module","exports"],"mappings":"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","sourcesContent":["\"use strict\";\nconst request_1 = require(\"./util/request\");\nconst TaxjarTypes = require(\"./util/types\");\nclass Taxjar {\n    constructor(config) {\n        let apiUrl = Taxjar.DEFAULT_API_URL + '/' + Taxjar.API_VERSION + '/';\n        if (!config || !config['apiKey']) {\n            throw new Error('Please provide a TaxJar API key');\n        }\n        if (config && config['apiUrl']) {\n            apiUrl = config['apiUrl'] + '/' + Taxjar.API_VERSION + '/';\n        }\n        this.config = {\n            apiUrl: apiUrl,\n            apiKey: config['apiKey'],\n            headers: config['headers']\n        };\n        this.request = request_1.default(this.config);\n    }\n    getApiConfig(index) {\n        return this.config[index];\n    }\n    setApiConfig(index, value) {\n        if (index === 'apiUrl') {\n            value += '/' + Taxjar.API_VERSION + '/';\n        }\n        this.config[index] = value;\n        this.request = request_1.default(this.config);\n    }\n    categories() {\n        return this.request.get({\n            url: 'categories'\n        });\n    }\n    taxForOrder(params) {\n        return this.request.post({\n            url: 'taxes',\n            params\n        });\n    }\n    listOrders(params) {\n        return this.request.get({\n            url: 'transactions/orders',\n            params\n        });\n    }\n    showOrder(transactionId, params) {\n        return this.request.get({\n            url: 'transactions/orders/' + transactionId,\n            params\n        });\n    }\n    createOrder(params) {\n        return this.request.post({\n            url: 'transactions/orders',\n            params\n        });\n    }\n    updateOrder(params) {\n        return this.request.put({\n            url: 'transactions/orders/' + params.transaction_id,\n            params\n        });\n    }\n    deleteOrder(transactionId, params) {\n        return this.request.delete({\n            url: 'transactions/orders/' + transactionId,\n            params\n        });\n    }\n    listRefunds(params) {\n        return this.request.get({\n            url: 'transactions/refunds',\n            params\n        });\n    }\n    showRefund(transactionId, params) {\n        return this.request.get({\n            url: 'transactions/refunds/' + transactionId,\n            params\n        });\n    }\n    createRefund(params) {\n        return this.request.post({\n            url: 'transactions/refunds',\n            params\n        });\n    }\n    updateRefund(params) {\n        return this.request.put({\n            url: 'transactions/refunds/' + params.transaction_id,\n            params\n        });\n    }\n    deleteRefund(transactionId, params) {\n        return this.request.delete({\n            url: 'transactions/refunds/' + transactionId,\n            params\n        });\n    }\n    listCustomers() {\n        return this.request.get({\n            url: 'customers'\n        });\n    }\n    showCustomer(customerId) {\n        return this.request.get({\n            url: 'customers/' + customerId\n        });\n    }\n    createCustomer(params) {\n        return this.request.post({\n            url: 'customers',\n            params\n        });\n    }\n    updateCustomer(params) {\n        return this.request.put({\n            url: 'customers/' + params.customer_id,\n            params\n        });\n    }\n    deleteCustomer(customerId) {\n        return this.request.delete({\n            url: 'customers/' + customerId\n        });\n    }\n    ratesForLocation(zip, params) {\n        return this.request.get({\n            url: 'rates/' + zip,\n            params\n        });\n    }\n    nexusRegions() {\n        return this.request.get({\n            url: 'nexus/regions'\n        });\n    }\n    validateAddress(params) {\n        return this.request.post({\n            url: 'addresses/validate',\n            params\n        });\n    }\n    validate(params) {\n        return this.request.get({\n            url: 'validation',\n            params\n        });\n    }\n    summaryRates() {\n        return this.request.get({\n            url: 'summary_rates'\n        });\n    }\n}\nTaxjar.DEFAULT_API_URL = 'https://api.taxjar.com';\nTaxjar.SANDBOX_API_URL = 'https://api.sandbox.taxjar.com';\nTaxjar.API_VERSION = 'v2';\nTaxjar.Error = TaxjarTypes.TaxjarError;\nmodule.exports = Taxjar;\n"]},"metadata":{},"sourceType":"script"}