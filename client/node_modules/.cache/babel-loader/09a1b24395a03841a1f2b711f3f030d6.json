{"ast":null,"code":"import { takeEvery } from 'redux-saga/effects';\nimport { firestore, convertCollectionsSnapshotToMap } from \"../../firebase/firebase.utils\";\nimport { fetchCollectionSuccess, fetchCollectionFailure } from './shop.actions';\nimport ShopActionTypes from './shop.types';\nexport function* fetchCollectionsAsync() {\n  yield console.log('im fired');\n  const collectionRef = firestore.collection('collections');\n  const snapshot = yield collectionRef.get();\n  const collectionsMap = collectionRef.get().then(snapshot => {\n    const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n    dispatch(fetchCollectionSuccess(collectionsMap));\n  }).catch(error => dispatch(fetchCollectionFailure(error.message)));\n}\nexport function* fetchCollectionsStart() {\n  yield takeEvery(ShopActionTypes.FETCH_COLLECTIONS_START, fetchCollectionsAsync);\n}","map":{"version":3,"sources":["/Users/Zobrist/Desktop/Code/krown_clothing/src/redux/shop/shop.sagas.js"],"names":["takeEvery","firestore","convertCollectionsSnapshotToMap","fetchCollectionSuccess","fetchCollectionFailure","ShopActionTypes","fetchCollectionsAsync","console","log","collectionRef","collection","snapshot","get","collectionsMap","then","dispatch","catch","error","message","fetchCollectionsStart","FETCH_COLLECTIONS_START"],"mappings":"AAAA,SAASA,SAAT,QAA0B,oBAA1B;AAEA,SAASC,SAAT,EAAoBC,+BAApB,QAA2D,+BAA3D;AAEA,SACIC,sBADJ,EAEIC,sBAFJ,QAGO,gBAHP;AAKA,OAAOC,eAAP,MAA4B,cAA5B;AAEA,OAAO,UAAUC,qBAAV,GAAkC;AACrC,QAAOC,OAAO,CAACC,GAAR,CAAY,UAAZ,CAAP;AAEA,QAAMC,aAAa,GAAGR,SAAS,CAACS,UAAV,CAAqB,aAArB,CAAtB;AACA,QAAMC,QAAQ,GAAG,MAAMF,aAAa,CAACG,GAAd,EAAvB;AACA,QAAMC,cAAc,GACpBJ,aAAa,CACRG,GADL,GAEKE,IAFL,CAEUH,QAAQ,IAAI;AACd,UAAME,cAAc,GAAGX,+BAA+B,CAACS,QAAD,CAAtD;AACAI,IAAAA,QAAQ,CAACZ,sBAAsB,CAACU,cAAD,CAAvB,CAAR;AACH,GALL,EAKOG,KALP,CAKaC,KAAK,IAAIF,QAAQ,CAACX,sBAAsB,CAACa,KAAK,CAACC,OAAP,CAAvB,CAL9B,CADA;AAQH;AAED,OAAO,UAAUC,qBAAV,GAAkC;AACrC,QAAMnB,SAAS,CACXK,eAAe,CAACe,uBADL,EAEXd,qBAFW,CAAf;AAIH","sourcesContent":["import { takeEvery } from 'redux-saga/effects';\n\nimport { firestore, convertCollectionsSnapshotToMap } from \"../../firebase/firebase.utils\";\n\nimport {\n    fetchCollectionSuccess,\n    fetchCollectionFailure\n} from './shop.actions';\n\nimport ShopActionTypes from './shop.types';\n\nexport function* fetchCollectionsAsync() {\n    yield  console.log('im fired');\n\n    const collectionRef = firestore.collection('collections');\n    const snapshot = yield collectionRef.get();    \n    const collectionsMap = \n    collectionRef\n        .get()\n        .then(snapshot => {\n            const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n            dispatch(fetchCollectionSuccess(collectionsMap))\n        }).catch(error => dispatch(fetchCollectionFailure(error.message)))\n       \n}\n\nexport function* fetchCollectionsStart() {\n    yield takeEvery(\n        ShopActionTypes.FETCH_COLLECTIONS_START, \n        fetchCollectionsAsync\n    );\n}"]},"metadata":{},"sourceType":"module"}