{"version":3,"sources":["components/form-input/form-input.styles.jsx","components/form-input/form-input.component.jsx","assets/crown.png","pages/admin-dashboard/admin-dashboard.styles.jsx","pages/admin-dashboard/admin-dashboard.component.jsx","redux/admin/admin.user.actions.js"],"names":["subColor","shrinkLabelStyles","css","GroupContainer","styled","div","FormInputContainer","input","FormInputLabel","label","FormInput","handleChange","props","onChange","className","value","length","AdminDashboardPageWrapper","connect","dispatch","checkAdminCredentials","userCredentials","adminCredentials","type","AdminUserActionTypes","ADMIN_SIGN_IN_START","payload","email","password","handleSubmit","event","a","preventDefault","target","name","setAdminCredentials","useState","onSubmit","autoComplete"],"mappings":"qKAEMA,EAAW,OAGXC,EAAoBC,YAAH,6EAFL,SAQLC,EAAiBC,IAAOC,IAAV,mIAQdC,EAAqBF,IAAOG,MAAV,qVAGpBP,EAOkBA,EAMvBC,GAIOO,EAAiBJ,IAAOK,MAAV,6NAChBT,EASLC,G,mCC9BSS,IAXG,SAAC,GAAD,IAAGC,EAAH,EAAGA,aAAcF,EAAjB,EAAiBA,MAAUG,EAA3B,wBAChB,eAACT,EAAD,WACE,cAACG,EAAD,aAAoBO,SAAUF,GAAkBC,IAC/CH,EACC,cAACD,EAAD,CAAgBM,UAAWF,EAAMG,MAAMC,OAAS,SAAW,GAA3D,SACGP,IAED,U,iCCfO,QAA0B,mC,4ICG5BQ,G,OAA4Bb,IAAOC,IAAV,mL,wBC+CvBa,sBAAQ,MAJI,SAAAC,GAAQ,MAAK,CACtCC,sBAAuB,SAACC,GAAD,OAAqBF,GCxCTG,EDwCwCD,ECxCnB,CACxDE,KAAMC,IAAqBC,oBAC3BC,SAAUJ,EAAiBK,MAAOL,EAAiBM,aAFhB,IAAAN,MD2CtBJ,EAzCQ,SAAC,GAAgD,IAA9CE,EAA6C,EAA7CA,sBAAuBC,EAAsB,EAAtBA,gBACzCQ,EAAY,uCAAG,WAAMC,GAAN,SAAAC,EAAA,sDACnBD,EAAME,iBACNZ,EAAsBC,GAFH,2CAAH,sDAIZV,EAAe,SAAAmB,GACnB,MAAwBA,EAAMG,OAAOlB,MAA7BA,EAAR,EAAQA,MAAOmB,EAAf,EAAeA,KAEfC,EAAoB,2BAAKb,GAAN,kBAAyBY,EAAOnB,MAErD,EAAgDqB,mBAAS,CAAET,MAAO,GAAIC,SAAU,KAAhF,mBAAON,EAAP,KAAyBa,EAAzB,KACeP,GAAaN,EAApBK,MAAoBL,EAAbM,UAEf,OACE,cAACX,EAAD,UACE,uBAAMH,UAAU,mBAAmBuB,SAAU,SAACP,GAAD,OAAWA,EAAME,kBAA9D,UACE,cAAC,IAAD,CACEvB,MAAM,QACNyB,KAAK,QACLX,KAAK,QACLR,MAAOO,EAAiBK,MACxBhB,aAAcA,EACd2B,aAAa,UAEf,cAAC,IAAD,CACEf,KAAK,WACLZ,aAAcA,EACduB,KAAK,WACLzB,MAAM,WACN6B,aAAa,QACbvB,MAAOa,IAET,cAAC,IAAD,CAAcC,aAAcA,EAA5B","file":"static/js/6.a8abeb99.chunk.js","sourcesContent":["import styled, { css } from 'styled-components';\n\nconst subColor = 'grey';\nconst mainColor = 'black';\n\nconst shrinkLabelStyles = css`\n  top: -14px;\n  font-size: 12px;\n  color: ${mainColor};\n`;\n\nexport const GroupContainer = styled.div`\n  position: relative;\n  margin: 45px 0;\n  input[type='password'] {\n    letter-spacing: 0.3em;\n  }\n`;\n\nexport const FormInputContainer = styled.input`\n  background: none;\n  background-color: white;\n  color: ${subColor};\n  font-size: 18px;\n  padding: 10px 10px 10px 5px;\n  display: block;\n  width: 100%;\n  border: none;\n  border-radius: 0;\n  border-bottom: 1px solid ${subColor};\n  margin: 25px 0;\n  &:focus {\n    outline: none;\n  }\n  &:focus ~ label {\n    ${shrinkLabelStyles}\n  }\n`;\n\nexport const FormInputLabel = styled.label`\n  color: ${subColor};\n  font-size: 16px;\n  font-weight: normal;\n  position: absolute;\n  pointer-events: none;\n  left: 5px;\n  top: 10px;\n  transition: 300ms ease all;\n  &.shrink {\n    ${shrinkLabelStyles}\n  }\n`;","import React from 'react';\n\nimport {\n  GroupContainer,\n  FormInputContainer,\n  FormInputLabel\n} from './form-input.styles';\n\nconst FormInput = ({ handleChange, label, ...props }) => (\n  <GroupContainer>\n    <FormInputContainer onChange={handleChange} {...props} />\n    {label ? (\n      <FormInputLabel className={props.value.length ? 'shrink' : ''}>\n        {label}\n      </FormInputLabel>\n    ) : null}\n  </GroupContainer>\n);\n\nexport default FormInput;","export default __webpack_public_path__ + \"static/media/crown.303345ea.png\";","import styled from 'styled-components';\nimport crownLogo from '../../assets/crown.png';\n\nexport const AdminDashboardPageWrapper = styled.div`\n    width: 78.78vw;\n    height: 81.25vh;\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    margin: 20px auto;\n`;\n","import React, { useState } from \"react\";\nimport { connect } from 'react-redux';\nimport CustomButton from '../../components/custom-button/custom-button.component';\nimport FormInput from '../../components/form-input/form-input.component';\nimport { AdminDashboardPageWrapper } from \"./admin-dashboard.styles\";\nimport './admin-dashboard.styles';\nimport { checkAdminCredentials } from '../../redux/admin/admin.user.actions'\nimport { CustomButtonContainer } from \"../../components/custom-button/custom-button.styles\";\n\nconst AdminDashboard = ({ checkAdminCredentials, userCredentials }) => {\n  const handleSubmit = async event => {\n    event.preventDefault();\n    checkAdminCredentials(userCredentials);\n  };\n  const handleChange = event => {\n    const { value, name } = event.target.value;\n\n    setAdminCredentials({ ...adminCredentials, [name]: value });\n  };\n  const [adminCredentials, setAdminCredentials] = useState({ email: '', password: '' })\n  const { email, password } = adminCredentials;\n\n  return (\n    <AdminDashboardPageWrapper >\n      <form className='admin-login-form' onSubmit={(event) => event.preventDefault()}>\n        <FormInput\n          label='email'\n          name='email'\n          type='email'\n          value={adminCredentials.email}\n          handleChange={handleChange}\n          autoComplete='false'\n        />\n        <FormInput\n          type='password'\n          handleChange={handleChange}\n          name='password'\n          label='password'\n          autoComplete='false'\n          value={password}\n        />\n        <CustomButton handleSubmit={handleSubmit}> sign in </CustomButton>\n      </form>\n    </AdminDashboardPageWrapper>\n  )\n};\nconst mapDispatchToProps = dispatch => ({\n  checkAdminCredentials: (userCredentials) => dispatch(checkAdminCredentials(userCredentials))\n});\n\nexport default connect(null, mapDispatchToProps)(AdminDashboard);","import { AdminUserActionTypes } from './admin.user.types';\n\nexport const setCurrentUser = adminUser => ({\n  type: AdminUserActionTypes.SET_CURRENT_ADMIN_USER,\n  payload: adminUser\n});\n\nexport const checkAdminCredentials = adminCredentials => ({\n  type: AdminUserActionTypes.ADMIN_SIGN_IN_START,\n  payload: (adminCredentials.email, adminCredentials.password)\n})\n"],"sourceRoot":""}