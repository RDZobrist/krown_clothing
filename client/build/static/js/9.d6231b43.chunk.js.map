{"version":3,"sources":["assets/crown.png","components/checkout-item/checkout-item.styles.jsx","components/checkout-item/checkout-item.component.jsx","components/checkout-button/stripe-button.component.jsx","pages/checkout/checkout.styles.jsx","pages/checkout/checkout.component.jsx"],"names":["CheckoutItemContainer","styled","div","ImageContainer","TextContainer","span","QuantityContainer","displayName","RemoveButtonContainer","connect","dispatch","clearItem","item","addItem","removeItem","cartItem","name","imageUrl","price","quantity","src","alt","onClick","clearCart","priceForStripe","label","billingAddress","shippingAddress","image","description","amount","panelLabel","token","axios","url","method","data","then","res","alert","catch","err","console","log","stripeKey","CheckoutPageContainer","CrownLogo","CheckoutHeaderContainer","CheckoutHeaderBlock","TotalContainer","SubtotalSpan","TestWarningccinfoContainer","mapStateToProps","createStructuredSelector","cartItems","selectCartItems","total","selectCartTotal","currentUser","selectCurrentUser","tax","map","id","length","Intl","NumberFormat","style","currency","currencyDisplay","format"],"mappings":"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","file":"static/js/9.d6231b43.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/crown.303345ea.png\";","import styled from 'styled-components';\n\nexport const CheckoutItemContainer = styled.div`\n  width: 100%;\n  display: flex;\n  min-height: 100px;\n  border-bottom: 1px solid darkgrey;\n  padding: 15px 0;\n  font-size: 20px;\n  align-items: center;\n  @media screen and (max-width: 800px) {\n    font-size: 18px;\n  }\n`;\n\nexport const ImageContainer = styled.div`\n  width: 23%;\n  padding-right: 15px;\n  border-radius: 3px;\n  img {\n    width: 100%;\n    height: 100%;\n  }\n`;\n\nexport const TextContainer = styled.span`\n  width: 23%;\n  @media screen and (max-width: 800px) {\n    width: 22%;\n  }\n`;\n\nexport const QuantityContainer = styled(TextContainer)`\n  display: flex;\n  span {\n    margin: 0 10px;\n  }\n  div {\n    cursor: pointer;\n  }\n`;\n\nQuantityContainer.displayName = 'QuantityContainer';\n\nexport const RemoveButtonContainer = styled.div`\n  padding-left: 12px;\n  cursor: pointer;\n`;\n\nRemoveButtonContainer.displayName = 'RemoveButtonContainer';","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport {\n  clearItem,\n  addItem,\n  removeItem\n} from '../../redux/cart/cart.actions';\n\nimport {\n  CheckoutItemContainer,\n  ImageContainer,\n  TextContainer,\n  QuantityContainer,\n  RemoveButtonContainer\n} from './checkout-item.styles';\n\nexport const CheckoutItem = ({ cartItem, clearItem, addItem, removeItem }) => {\n  const { name, imageUrl, price, quantity } = cartItem;\n  return (\n    <CheckoutItemContainer>\n      <ImageContainer>\n        <img src={imageUrl} alt='item' />\n      </ImageContainer>\n      <TextContainer>{name}</TextContainer>\n      <QuantityContainer>\n        <div onClick={() => removeItem(cartItem)}>&#10094;</div>\n        <span>{quantity}</span>\n        <div onClick={() => addItem(cartItem)}>&#10095;</div>\n      </QuantityContainer>\n      <TextContainer>{price}</TextContainer>\n      <RemoveButtonContainer onClick={() => clearItem(cartItem)}>\n        &#10005;\n      </RemoveButtonContainer>\n    </CheckoutItemContainer>\n  );\n};\n\nconst mapDispatchToProps = dispatch => ({\n  clearItem: item => dispatch(clearItem(item)),\n  addItem: item => dispatch(addItem(item)),\n  removeItem: item => dispatch(removeItem(item))\n});\n\nexport default connect(\n  null,\n  mapDispatchToProps\n)(CheckoutItem);","import React from 'react';\nimport { connect } from 'react-redux';\nimport StripeCheckout from 'react-stripe-checkout';\nimport axios from 'axios';\nimport { clearCart } from '../../redux/cart/cart.actions';\n\nconst StripeCheckoutButton = ({ price, clearCart }) => {\n  const priceForStripe = price * 100;\n  const publishableKey = 'pk_test_51JrB82LXLc6RQBpHwh9xIxjIZEPR9vvVOlT1rcOjDXAS2gubDCmvAPsd81LoJhScB1MjcE8yxsqfbo6jX5VI8Hz300SVfgd3pf';\n\n  const onToken = token => {\n    \n    axios({\n        url: '/payment',\n        method: 'post', \n        data: {\n            amount: priceForStripe,\n            token\n        }\n    }).then(res => {\n        alert('Your payment has been processed successfully.')\n        clearCart();\n\n    }).catch(err => {\n        console.log('Payment error: ', err);\n        alert('Your payment didn\\'t go through. Please be sure to use the provided credit cards');\n    });\n  };\n\n  return (\n    <StripeCheckout\n      label='Pay Now'\n      name='KRWN Clothing Ltd.'\n      billingAddress\n      shippingAddress\n      image='https://svgshare.com/i/CUz.svg'\n      description={`Your total is ${price}`}\n      amount={priceForStripe}\n      panelLabel='Pay Now'\n      token={onToken}\n      stripeKey={publishableKey}\n    />\n  );\n};\n\nconst mapDispatchToProps = dispatch => ({\n  clearCart: () => dispatch(clearCart())\n\n})\n\nexport default connect(null, mapDispatchToProps)(StripeCheckoutButton);","import styled from \"styled-components\";\nimport CrownLogo from '../../assets/crown.png'\nexport const CheckoutPageContainer = styled.div`  \n    width: 58vw;\n    min-height: 90vh;\n    margin-right: 11vw;\n    margin-left: 11vw;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    background-image: url(${CrownLogo})\n    margin: 50px auto;\n`;\n \nexport const CheckoutHeaderContainer = styled.div`\n    width: 100%;\n    padding: 10px 0;\n    display: flex;\n    justify-content: space-between;\n    border-bottom: 1px solid darkgrey;\n`;\n\nexport const CheckoutHeaderBlock = styled.div`\n    text-transform: capitalize;\n    width: 23%;\n    &:last-child {\n        width: 8%;\n      }\n`;\n\nexport const TotalContainer = styled.div` \n    margin-top: 1%;\n    margin-left: auto;\n    font-size: 1.90rem;\n    font-weight: 500;\n  \n`;\nexport const SubtotalSpan = styled.span`\n    font-size: 50%;\n    font-weight: lighter;\n    margin: 0;\n    padding; 0;\n`;\n\nexport const TestWarningccinfoContainer = styled.div`\n    text-align: center;\n    color: red;\n    font-size: 2.75rem;\n    margin-top: 20px;\n    &:button {\n            margin-left: auto;\n            margin-top: 50px;\n          }\n    \n`;","import React, { Fragment } from \"react\";\nimport { connect } from \"react-redux\";\nimport { createStructuredSelector } from \"reselect\";\nimport CheckoutItem from \"../../components/checkout-item/checkout-item.component\";\nimport StripeCheckoutButton from \"../../components/checkout-button/stripe-button.component\";\nimport { selectCartItems, selectCartTotal } from \"../../redux/cart/cart.selectors\";\nimport { selectCurrentUser } from \"../../redux/user/user.selectors\";\nimport {\n    CheckoutPageContainer,\n    CheckoutHeaderContainer,\n    SubtotalSpan,\n    CheckoutHeaderBlock,\n    TotalContainer,\n    TestWarningccinfoContainer\n} from \"./checkout.styles\";\n\nconst CheckoutPage = ({ currentUser, cartItems, total, tax = total * .08 }) => {\n    return(\n    <CheckoutPageContainer>\n\n        {currentUser !== null ? (<Fragment><h3>{currentUser.displayName}'s cart</h3><br /></Fragment>) : (null)}\n        <CheckoutHeaderContainer>\n\n            <CheckoutHeaderBlock><span>Product</span></CheckoutHeaderBlock>\n            <CheckoutHeaderBlock><span>Description</span></CheckoutHeaderBlock>\n            <CheckoutHeaderBlock><span>Quantity</span></CheckoutHeaderBlock>\n            <CheckoutHeaderBlock><span>Price</span></CheckoutHeaderBlock>\n            <CheckoutHeaderBlock><span>Remove</span></CheckoutHeaderBlock>\n        </CheckoutHeaderContainer>\n        {cartItems.map(cartItem => (<CheckoutItem cartItem={cartItem} key={cartItem.id} />))}\n        {cartItems.length\n            ?\n            (\n                <Fragment>\n                    <TotalContainer>\n                        <SubtotalSpan>{new Intl.NumberFormat('en-us', {\n                            style: 'currency',\n                            currency: 'USD',\n                            currencyDisplay: 'symbol',\n                        }).format(total)}      subtotal</SubtotalSpan>\n                    </TotalContainer>\n\n                    <TotalContainer>\n\n                        <SubtotalSpan>(+)   {new Intl.NumberFormat('en-us', {\n                            style: 'currency',\n                            currency: 'USD',\n                            currencyDisplay: 'symbol',\n                        }).format(tax)}      tax</SubtotalSpan>\n\n                    </TotalContainer>\n                    {(total > 0.01 && total <= 49.99) ? (<TotalContainer><SubtotalSpan>Shipping and Handling free on orders over $50.00</SubtotalSpan></TotalContainer>\n                    ) : null}\n                    <TotalContainer>\n\n                        <span>Amount Due  {new Intl.NumberFormat('en-us', {\n                            style: 'currency',\n                            currency: 'USD',\n                            currencyDisplay: 'symbol',\n                        }).format(total + tax)}</span>\n                    </TotalContainer>\n                    <TestWarningccinfoContainer>\n                        * * * * <br />Please use the folowing credit card for payments\n                        <br />\n                        4242 4242 4242 4242\n                        <br />\n                        Exp: 11/26 -- CVV: 424\n                        <StripeCheckoutButton price={new Intl.NumberFormat('en-us', {\n                            style: 'currency',\n                            currency: 'USD',\n                            currencyDisplay: 'symbol',\n                        }).format(total + tax)} />\n                    </TestWarningccinfoContainer>\n\n                </ Fragment>\n            )\n            : <TotalContainer>\n\n                <span>{new Intl.NumberFormat('en-us', {\n                    style: 'currency',\n                    currency: 'USD',\n                    currencyDisplay: 'symbol',\n                }).format(total + tax)}</span>\n            </TotalContainer>\n        }\n    </CheckoutPageContainer>\n    )\n    }\n    \nconst mapStateToProps = createStructuredSelector({\n    cartItems: selectCartItems,\n    total: selectCartTotal,\n    currentUser: selectCurrentUser\n})\nexport default connect(mapStateToProps)(CheckoutPage)"],"sourceRoot":""}